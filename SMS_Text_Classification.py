# -*- coding: utf-8 -*-
"""fcc_sms_text_classification - Aditya Venkat.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CBLfyh2nf1MW0kDERKFpsV9HFOGWTSVk
"""

# Commented out IPython magic to ensure Python compatibility.
try:
  # This command only in Colab.
#   %tensorflow_version 2.x
except Exception:
  pass
import tensorflow as tf
import pandas as pd
from tensorflow import keras
import tensorflow_datasets as tfds
import numpy as np
import matplotlib.pyplot as plt

# get data files
!wget https://cdn.freecodecamp.org/project-data/sms/train-data.tsv
!wget https://cdn.freecodecamp.org/project-data/sms/valid-data.tsv

train_file_path = "train-data.tsv"
test_file_path = "valid-data.tsv"

df_train = pd.read_csv(train_file_path, sep="\t", header=None)
df_train = df_train.rename(columns={0: 'class', 1: 'message'})
df_test = pd.read_csv(test_file_path, sep="\t", header=None)
df_test = df_test.rename(columns={0: 'class', 1: 'message'})
print(df_train.head())
print(df_train.describe())
print(df_test.head())
print(df_test.describe())

max_words = 1000 # 1000 top recurring words
max_len = 500 # cutoff at 500 words

t = tf.keras.preprocessing.text.Tokenizer(num_words = max_words) # Tokenizing the words
t.fit_on_texts(df_train['message'])

sequences = t.texts_to_sequences(df_train['message'])
sequences_matrix = sequence.pad_sequences(sequences, maxlen=max_len)
sequences_matrix[:5]

class_train = df_train['class'].astype('category').cat.codes
class_test  = df_test['class'].astype('category').cat.codes
print(class_train[:5])
print(class_test[:5])

model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Input(shape=[max_len]))
model.add(tf.keras.layers.Embedding(max_words, 50, input_length=max_len))
model.add(tf.keras.layers.LSTM(64))
model.add(tf.keras.layers.Dense(256, activation='relu'))
model.add(tf.keras.layers.Dropout(0.5))
model.add(tf.keras.layers.Dense(1, activation='sigmoid'))
model.summary()

model.compile(optimizer = 'RMSprop', loss='binary_crossentropy', metrics=['accuracy'])
history = model.fit(sequences_matrix, class_train,
              batch_size=128, epochs=,
              validation_split=0.2,
              callbacks=[tf.keras.callbacks.EarlyStopping(
                  monitor='val_loss', min_delta=0.0001)])

def preprocessing(X):
  x = t.texts_to_sequences(X)
  return sequence.pad_sequences(x, maxlen=max_len)

# function to predict messages based on model
# (should return list containing prediction and label, ex. [0.008318834938108921, 'ham'])
def predict_message(pred_text):
  prob = model.predict(preprocessing(pd.Series([pred_text])))[0]
  prediction = [prob, 'ham' if prob < 0.5 else 'spam']

  return (prediction)

pred_text = "how are you doing today?"

prediction = predict_message(pred_text)
print(prediction)

# Run this cell to test your function and model. Do not modify contents.
def test_predictions():
  test_messages = ["how are you doing today",
                   "sale today! to stop texts call 98912460324",
                   "i dont want to go. can we try it a different day? available sat",
                   "our new mobile video service is live. just install on your phone to start watching.",
                   "you have won Â£1000 cash! call to claim your prize.",
                   "i'll bring it tomorrow. don't forget the milk.",
                   "wow, is your arm alright. that happened to me one time too"
                  ]

  test_answers = ["ham", "spam", "ham", "spam", "spam", "ham", "ham"]
  passed = True

  for msg, ans in zip(test_messages, test_answers):
    prediction = predict_message(msg)
    if prediction[1] != ans:
      passed = False

  if passed:
    print("You passed the challenge. Great job!")
  else:
    print("You haven't passed yet. Keep trying.")

test_predictions()